/**
 * Copyright 2024 The Ground Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    /**
     * Returns the email address of the requesting user.
     */
    function getEmail() {
      return request.auth.token.email;
    }

    /**
     * Returns the regular expression matching emails granted access.
     */
    function getPassRegexp() {
      return firestore.get(/databases/(default)/documents/passlist/regexp).data.regexp
    }

    /**
     * Returns true iff the user's email is explicitly listed in the passlist.
     */
    function inPasslist(email) {
      return firestore.exists(/databases/(default)/documents/passlist/$(email));
    }

    /**
     * Returns true iff the user's email matches the passlist regex or
     * is explicitly listed in the passlist.
     */
    function canAccess(email) {
      return request.auth != null && (email.matches(getPassRegexp()) || inPasslist(email));
    }
    
    match /offline-imagery/{allPaths=**} {
      // All authenticated users can read.
      allow read: if canAccess(getEmail());
    }
    
    match /user-media/{allPaths=**} {
      // All authenticated users can read.
      allow create, read, write: if canAccess(getEmail());
    }    
  }
}
