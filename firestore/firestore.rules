/**
 * Copyright 2020 The Ground Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

 // Define access rules for Firestore collections and documents.
 service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * Fetches and returns the survey with the specified id.
     */
    function getSurvey(surveyId) {
      return get(/databases/$(database)/documents/surveys/$(surveyId)).data;
    }

   /**
     * Returns the role of the specified email address in the given survey.
     */
    function getRole(survey) {
      return survey.acl[request.auth.token.email];
    }

    /**
     * Returns the regular expression matching emails granted access.
     */
    function getPassRegexp() {
      return get(/databases/$(database)/documents/passlist/regexp).data.regexp
    }

    /**
     * Returns true iff the user's email is explicitly listed in the passlist.
     */
    function inPasslist() {
      return exists(/databases/$(database)/documents/passlist/$(request.auth.token.email));
    }

    /**
     * Returns true iff the user's email matches the passlist regex or
     * is explicitly listed in the passlist.
     */
    function canAccess() {
      return request.auth != null && (request.auth.token.email.matches(getPassRegexp()) || inPasslist());
    }

    /**
     * Returns true iff the user with the given email can read the specified
     * survey.
     */
    function canViewSurvey(survey) {
      return canAccess() && getRole(survey) != null;
    }

    /**
     * Returns true iff the user with the given email has one of the specified
     * roles in the given survey.
     */
    function isOneOf(survey, roles) {
      return survey.acl[request.auth.token.email] in roles;
    }

    /**
     * Returns true iff the user with the given email can manage the specified
     * survey (modify the survey document, edit user data, etc.).
     */
    function canManageSurvey(survey) {
      return canAccess() && isOneOf(survey, ['OWNER', 'SURVEY_ORGANIZER']);
    }

    /**
     * Returns true iff the user with the given email can contribute LOIs 
     * and submissions to the specified survey (i.e., add/edit LOIs and
     * submissions).
     */
    function canCollectData(survey) {
      return canAccess() && isOneOf(survey, ['OWNER', 'SURVEY_ORGANIZER', 'DATA_COLLECTOR']);
    }

    /**
     * Returns true iff the user with the provided email created the specified resource.
     */
    function isCreator(resource) {
      // TODO(#1154): Make `owner` its own field and stop assuming `creator==owner`.
      return resource.data.created.user.email == request.auth.token.email;     
    }

    // Allow users to read, create, and write their own profiles in the db.
    match /users/{userId} {
      allow read, create, write: if userId == request.auth.uid;
    }

    // All users need to be able to read the passlist for rules to work.
    match /passlist/{entry} {
      // TODO(#1602): Replace "regexp" with simple pattern matching.
      allow read: if request.auth != null && entry in ['regexp', request.auth.token.email];
    }

    // Apply passlist and survey-level ACLs to survey documents.
    match /surveys/{surveyId} {
      allow read: if canViewSurvey(resource.data);
      allow write: if canManageSurvey(resource.data);
      allow create: if canAccess();
    }

    // Allow passlisted users to access Terms of Service and other config.
    match /config/{id} {
      allow read: if canAccess();
    }

    // Apply passlist and survey-level ACLs to LOI documents.
    match /surveys/{surveyId}/lois/{loiId} {
      // Allow if user has has read access to the survey.
      allow read: if canViewSurvey(getSurvey(surveyId));
      // Allow if user is owner of the new LOI and can collect data.
      // TODO(#1154): Require owner as well.
      allow create: if canCollectData(getSurvey(surveyId));
      // Allow if user is owner of the existing LOI or can manage survey.
      allow write: if isCreator(resource) || canManageSurvey(getSurvey(surveyId));
    }

    // Apply passlist and survey-level ACLs to submission documents.
    match /surveys/{surveyId}/submissions/{submissionId} {
      // Allow if user has has read access to the survey.
      allow read: if canViewSurvey(getSurvey(surveyId));
      // Allow if user is owner of the new submission and can collect data.
      allow create: if isCreator(request.resource) && canCollectData(getSurvey(surveyId));
      // Allow if user is owner of the existing submission or can manage survey.
      allow write: if isCreator(resource) || canManageSurvey(getSurvey(surveyId));
    }

    // Apply passlist and survey-level ACLs to job documents.
    match /surveys/{surveyId}/jobs/{jobId} {
      // Allow if user has has read access to the survey.
      allow read: if canViewSurvey(getSurvey(surveyId));
      // Allow if user is owner of the new submission and can collect data.
      allow create: if canManageSurvey(getSurvey(surveyId)) || isCreator(request.resource);
      // Allow if user is owner of the existing submission or can manage survey.
      allow write: if canManageSurvey(getSurvey(surveyId)) || isCreator(resource);
    }
  }
}
