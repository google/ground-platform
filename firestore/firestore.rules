/**
 * Copyright 2020 The Ground Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

 // Define access rules for Firestore collections and documents.
 service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * Fetches and returns the survey with the specified id.
     */
    function getSurvey(surveyId) {
      return get(/databases/$(database)/documents/surveys/$(surveyId)).data;
    }

    /**
     * Returns the email address of the requesting user.
     */
    function getEmail() {
      return request.auth.token.email;
    }

   /**
     * Returns the role of the specified email address in the given survey.
     */
    function getRole(survey, email) {
      return survey.acl[email];
    }

    /**
     * Returns the regular expression matching emails granted access.
     */
    function getPassRegexp() {
      return get(/databases/$(database)/documents/passlist/regexp).data.regexp
    }

    /**
     * Returns true iff the user's email is explicitly listed in the passlist.
     */
    function inPasslist(email) {
      return exists(/databases/$(database)/documents/passlist/$(email));
    }

    /**
     * Returns true iff the user's email matches the passlist regex or
     * is explicitly listed in the passlist.
     */
    function canAccess(email) {
      return request.auth != null && (email.matches(getPassRegexp()) || inPasslist(email));
    }

    /**
     * Returns true iff the user with the given email can read the specified
     * survey.
     */
    function canViewSurvey(surveyId, email) {
      return canAccess(email) && getRole(surveyId, email) != null;
    }

    /**
     * Returns true iff the user with the given email has one of the specified
     * roles in the given survey.
     */
    function isOneOf(survey, email, roles) {
      return survey.acl[email] in roles;
    }

    /**
     * Returns true iff the user with the given email can manage the specified
     * survey (modify the survey document, edit user data, etc.).
     */
    function canManageSurvey(survey, email) {
      return canAccess(email) && isOneOf(survey, email, ['OWNER', 'SURVEY_ORGANIZER']);
    }

    /**
     * Returns true iff the user with the given email can contribute LOIs 
     * and submissions to the specified survey (i.e., add/edit LOIs and
     * submissions).
     */
    function canCollectData(survey, email) {
      return canAccess(email) && isOneOf(surveyId, email, ['OWNER', 'SURVEY_ORGANIZER', 'DATA_COLLECTOR']);
    }

    /**
     * Returns true iff the user with the provided email created the specified resource.
     */
    function isCreator(resource, email) {
      // TODO(#1154): Make `owner` its own field and stop assuming `creator==owner`.
      return resource.data.created.user.email == email;     
    }

    // All users need to be able to read the passlist for rules to work.
    match /users/{userId} {
      allow read, create, write: if userId == request.auth.uid;
    }

    // All users need to be able to read the passlist for rules to work.
    match /passlist/{email} {
      // TODO(#1602): Replace "regexp" with simple pattern matching.
      allow read: if request.auth != null && email in ['regexp', getEmail()];
    }

    // Apply passlist and survey-level ACLs to survey documents.
    match /surveys/{surveyId} {
      allow read: if canViewSurvey(resource.data, getEmail());
      allow write: if canManageSurvey(resource.data, getEmail());
      allow create: if canAccess(getEmail());
    }

    // Allow passlisted users to access Terms of Service and other config.
    match /config/{id} {
      allow read: if canAccess(getEmail());
    }

    // Apply passlist and survey-level ACLs to LOI documents.
    match /surveys/{surveyId}/lois/{loiId} {
      allow read: if canViewSurvey(getSurvey(surveyId), getEmail());
      allow create: if canManageSurvey(getSurvey(surveyId), getEmail()) || isCreator(request.resource, getEmail());
      allow write: if canManageSurvey(getSurvey(surveyId), getEmail()) || isCreator(resource, getEmail());
    }

    // Apply passlist and survey-level ACLs to submission documents.
    match /surveys/{surveyId}/submissions/{submissionId} {
      allow read: if canViewSurvey(getSurvey(surveyId), getEmail());
      allow create: if canManageSurvey(getSurvey(surveyId), getEmail()) || isCreator(request.resource, getEmail());
      allow write: if canManageSurvey(getSurvey(surveyId), getEmail()) || isCreator(resource, getEmail());
    }
  }
}
